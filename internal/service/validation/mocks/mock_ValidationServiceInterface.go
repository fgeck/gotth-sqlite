// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package validation

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockValidationServiceInterface creates a new instance of MockValidationServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidationServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidationServiceInterface {
	mock := &MockValidationServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockValidationServiceInterface is an autogenerated mock type for the ValidationServiceInterface type
type MockValidationServiceInterface struct {
	mock.Mock
}

type MockValidationServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidationServiceInterface) EXPECT() *MockValidationServiceInterface_Expecter {
	return &MockValidationServiceInterface_Expecter{mock: &_m.Mock}
}

// ValidateEmail provides a mock function for the type MockValidationServiceInterface
func (_mock *MockValidationServiceInterface) ValidateEmail(email string) error {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ValidateEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValidationServiceInterface_ValidateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateEmail'
type MockValidationServiceInterface_ValidateEmail_Call struct {
	*mock.Call
}

// ValidateEmail is a helper method to define mock.On call
//   - email
func (_e *MockValidationServiceInterface_Expecter) ValidateEmail(email interface{}) *MockValidationServiceInterface_ValidateEmail_Call {
	return &MockValidationServiceInterface_ValidateEmail_Call{Call: _e.mock.On("ValidateEmail", email)}
}

func (_c *MockValidationServiceInterface_ValidateEmail_Call) Run(run func(email string)) *MockValidationServiceInterface_ValidateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockValidationServiceInterface_ValidateEmail_Call) Return(err error) *MockValidationServiceInterface_ValidateEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValidationServiceInterface_ValidateEmail_Call) RunAndReturn(run func(email string) error) *MockValidationServiceInterface_ValidateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePassword provides a mock function for the type MockValidationServiceInterface
func (_mock *MockValidationServiceInterface) ValidatePassword(password string) error {
	ret := _mock.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValidationServiceInterface_ValidatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePassword'
type MockValidationServiceInterface_ValidatePassword_Call struct {
	*mock.Call
}

// ValidatePassword is a helper method to define mock.On call
//   - password
func (_e *MockValidationServiceInterface_Expecter) ValidatePassword(password interface{}) *MockValidationServiceInterface_ValidatePassword_Call {
	return &MockValidationServiceInterface_ValidatePassword_Call{Call: _e.mock.On("ValidatePassword", password)}
}

func (_c *MockValidationServiceInterface_ValidatePassword_Call) Run(run func(password string)) *MockValidationServiceInterface_ValidatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockValidationServiceInterface_ValidatePassword_Call) Return(err error) *MockValidationServiceInterface_ValidatePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValidationServiceInterface_ValidatePassword_Call) RunAndReturn(run func(password string) error) *MockValidationServiceInterface_ValidatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUsername provides a mock function for the type MockValidationServiceInterface
func (_mock *MockValidationServiceInterface) ValidateUsername(username string) error {
	ret := _mock.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUsername")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(username)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValidationServiceInterface_ValidateUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUsername'
type MockValidationServiceInterface_ValidateUsername_Call struct {
	*mock.Call
}

// ValidateUsername is a helper method to define mock.On call
//   - username
func (_e *MockValidationServiceInterface_Expecter) ValidateUsername(username interface{}) *MockValidationServiceInterface_ValidateUsername_Call {
	return &MockValidationServiceInterface_ValidateUsername_Call{Call: _e.mock.On("ValidateUsername", username)}
}

func (_c *MockValidationServiceInterface_ValidateUsername_Call) Run(run func(username string)) *MockValidationServiceInterface_ValidateUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockValidationServiceInterface_ValidateUsername_Call) Return(err error) *MockValidationServiceInterface_ValidateUsername_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValidationServiceInterface_ValidateUsername_Call) RunAndReturn(run func(username string) error) *MockValidationServiceInterface_ValidateUsername_Call {
	_c.Call.Return(run)
	return _c
}
