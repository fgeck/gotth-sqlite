// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package jwt

import (
	"github.com/fgeck/gotth-sqlite/internal/service/security/jwt"
	"github.com/fgeck/gotth-sqlite/internal/service/user"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJwtServiceInterface creates a new instance of MockJwtServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJwtServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJwtServiceInterface {
	mock := &MockJwtServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJwtServiceInterface is an autogenerated mock type for the JwtServiceInterface type
type MockJwtServiceInterface struct {
	mock.Mock
}

type MockJwtServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJwtServiceInterface) EXPECT() *MockJwtServiceInterface_Expecter {
	return &MockJwtServiceInterface_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function for the type MockJwtServiceInterface
func (_mock *MockJwtServiceInterface) GenerateToken(user1 *user.UserDto) (string, error) {
	ret := _mock.Called(user1)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*user.UserDto) (string, error)); ok {
		return returnFunc(user1)
	}
	if returnFunc, ok := ret.Get(0).(func(*user.UserDto) string); ok {
		r0 = returnFunc(user1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*user.UserDto) error); ok {
		r1 = returnFunc(user1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtServiceInterface_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockJwtServiceInterface_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - user1
func (_e *MockJwtServiceInterface_Expecter) GenerateToken(user1 interface{}) *MockJwtServiceInterface_GenerateToken_Call {
	return &MockJwtServiceInterface_GenerateToken_Call{Call: _e.mock.On("GenerateToken", user1)}
}

func (_c *MockJwtServiceInterface_GenerateToken_Call) Run(run func(user1 *user.UserDto)) *MockJwtServiceInterface_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.UserDto))
	})
	return _c
}

func (_c *MockJwtServiceInterface_GenerateToken_Call) Return(s string, err error) *MockJwtServiceInterface_GenerateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJwtServiceInterface_GenerateToken_Call) RunAndReturn(run func(user1 *user.UserDto) (string, error)) *MockJwtServiceInterface_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAndExtractClaims provides a mock function for the type MockJwtServiceInterface
func (_mock *MockJwtServiceInterface) ValidateAndExtractClaims(givenToken string) (*jwt.JwtCustomClaims, error) {
	ret := _mock.Called(givenToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAndExtractClaims")
	}

	var r0 *jwt.JwtCustomClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*jwt.JwtCustomClaims, error)); ok {
		return returnFunc(givenToken)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *jwt.JwtCustomClaims); ok {
		r0 = returnFunc(givenToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.JwtCustomClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(givenToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtServiceInterface_ValidateAndExtractClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAndExtractClaims'
type MockJwtServiceInterface_ValidateAndExtractClaims_Call struct {
	*mock.Call
}

// ValidateAndExtractClaims is a helper method to define mock.On call
//   - givenToken
func (_e *MockJwtServiceInterface_Expecter) ValidateAndExtractClaims(givenToken interface{}) *MockJwtServiceInterface_ValidateAndExtractClaims_Call {
	return &MockJwtServiceInterface_ValidateAndExtractClaims_Call{Call: _e.mock.On("ValidateAndExtractClaims", givenToken)}
}

func (_c *MockJwtServiceInterface_ValidateAndExtractClaims_Call) Run(run func(givenToken string)) *MockJwtServiceInterface_ValidateAndExtractClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwtServiceInterface_ValidateAndExtractClaims_Call) Return(jwtCustomClaims *jwt.JwtCustomClaims, err error) *MockJwtServiceInterface_ValidateAndExtractClaims_Call {
	_c.Call.Return(jwtCustomClaims, err)
	return _c
}

func (_c *MockJwtServiceInterface_ValidateAndExtractClaims_Call) RunAndReturn(run func(givenToken string) (*jwt.JwtCustomClaims, error)) *MockJwtServiceInterface_ValidateAndExtractClaims_Call {
	_c.Call.Return(run)
	return _c
}
