// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package config

import (
	"github.com/fgeck/gotth-sqlite/internal/service/config"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigLoaderInterface creates a new instance of MockConfigLoaderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigLoaderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigLoaderInterface {
	mock := &MockConfigLoaderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigLoaderInterface is an autogenerated mock type for the ConfigLoaderInterface type
type MockConfigLoaderInterface struct {
	mock.Mock
}

type MockConfigLoaderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigLoaderInterface) EXPECT() *MockConfigLoaderInterface_Expecter {
	return &MockConfigLoaderInterface_Expecter{mock: &_m.Mock}
}

// LoadConfig provides a mock function for the type MockConfigLoaderInterface
func (_mock *MockConfigLoaderInterface) LoadConfig() (*config.Config, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 *config.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*config.Config, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigLoaderInterface_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type MockConfigLoaderInterface_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
func (_e *MockConfigLoaderInterface_Expecter) LoadConfig() *MockConfigLoaderInterface_LoadConfig_Call {
	return &MockConfigLoaderInterface_LoadConfig_Call{Call: _e.mock.On("LoadConfig")}
}

func (_c *MockConfigLoaderInterface_LoadConfig_Call) Run(run func()) *MockConfigLoaderInterface_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigLoaderInterface_LoadConfig_Call) Return(config1 *config.Config, err error) *MockConfigLoaderInterface_LoadConfig_Call {
	_c.Call.Return(config1, err)
	return _c
}

func (_c *MockConfigLoaderInterface_LoadConfig_Call) RunAndReturn(run func() (*config.Config, error)) *MockConfigLoaderInterface_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}
