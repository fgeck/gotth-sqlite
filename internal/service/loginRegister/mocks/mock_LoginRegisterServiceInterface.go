// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package loginRegister

import (
	"context"

	"github.com/fgeck/gotth-sqlite/internal/service/user"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLoginRegisterServiceInterface creates a new instance of MockLoginRegisterServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginRegisterServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginRegisterServiceInterface {
	mock := &MockLoginRegisterServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoginRegisterServiceInterface is an autogenerated mock type for the LoginRegisterServiceInterface type
type MockLoginRegisterServiceInterface struct {
	mock.Mock
}

type MockLoginRegisterServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginRegisterServiceInterface) EXPECT() *MockLoginRegisterServiceInterface_Expecter {
	return &MockLoginRegisterServiceInterface_Expecter{mock: &_m.Mock}
}

// LoginUser provides a mock function for the type MockLoginRegisterServiceInterface
func (_mock *MockLoginRegisterServiceInterface) LoginUser(ctx context.Context, email string, password string) (string, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginRegisterServiceInterface_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockLoginRegisterServiceInterface_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx
//   - email
//   - password
func (_e *MockLoginRegisterServiceInterface_Expecter) LoginUser(ctx interface{}, email interface{}, password interface{}) *MockLoginRegisterServiceInterface_LoginUser_Call {
	return &MockLoginRegisterServiceInterface_LoginUser_Call{Call: _e.mock.On("LoginUser", ctx, email, password)}
}

func (_c *MockLoginRegisterServiceInterface_LoginUser_Call) Run(run func(ctx context.Context, email string, password string)) *MockLoginRegisterServiceInterface_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockLoginRegisterServiceInterface_LoginUser_Call) Return(s string, err error) *MockLoginRegisterServiceInterface_LoginUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockLoginRegisterServiceInterface_LoginUser_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (string, error)) *MockLoginRegisterServiceInterface_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function for the type MockLoginRegisterServiceInterface
func (_mock *MockLoginRegisterServiceInterface) RegisterUser(ctx context.Context, username string, email string, password string) (*user.UserCreatedDto, error) {
	ret := _mock.Called(ctx, username, email, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *user.UserCreatedDto
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*user.UserCreatedDto, error)); ok {
		return returnFunc(ctx, username, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *user.UserCreatedDto); ok {
		r0 = returnFunc(ctx, username, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserCreatedDto)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, username, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginRegisterServiceInterface_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockLoginRegisterServiceInterface_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx
//   - username
//   - email
//   - password
func (_e *MockLoginRegisterServiceInterface_Expecter) RegisterUser(ctx interface{}, username interface{}, email interface{}, password interface{}) *MockLoginRegisterServiceInterface_RegisterUser_Call {
	return &MockLoginRegisterServiceInterface_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, username, email, password)}
}

func (_c *MockLoginRegisterServiceInterface_RegisterUser_Call) Run(run func(ctx context.Context, username string, email string, password string)) *MockLoginRegisterServiceInterface_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockLoginRegisterServiceInterface_RegisterUser_Call) Return(userCreatedDto *user.UserCreatedDto, err error) *MockLoginRegisterServiceInterface_RegisterUser_Call {
	_c.Call.Return(userCreatedDto, err)
	return _c
}

func (_c *MockLoginRegisterServiceInterface_RegisterUser_Call) RunAndReturn(run func(ctx context.Context, username string, email string, password string) (*user.UserCreatedDto, error)) *MockLoginRegisterServiceInterface_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}
